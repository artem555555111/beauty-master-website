// –ú–æ–¥—É–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º –¥–∏–∑–∞–π–Ω–∞
export class ThemeSwitcher {
    constructor() {
        this.currentTheme = localStorage.getItem('theme') || 'minimal';
        this.themes = ['minimal', 'elegant', 'creative'];
        this.themeNames = {
            minimal: '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π',
            elegant: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π',
            creative: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π'
        };
        this.init();
    }

    init() {
        this.createThemeSelector();
        this.setTheme(this.currentTheme);
        this.bindEvents();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º
    createThemeSelector() {
        const header = document.querySelector('.header');
        if (!header) return;

        const navigation = header.querySelector('.navigation__actions');
        if (!navigation) return;

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º
        const themeSelector = document.createElement('div');
        themeSelector.className = 'theme-selector';
        themeSelector.innerHTML = `
            <div class="theme-selector__current">
                <span class="theme-selector__icon">üé®</span>
                <span class="theme-selector__name">${this.themeNames[this.currentTheme]}</span>
                <span class="theme-selector__arrow">‚ñº</span>
            </div>
            <div class="theme-selector__dropdown">
                <div class="theme-selector__option" data-theme="minimal">
                    <span class="theme-selector__icon">‚ú®</span>
                    <span class="theme-selector__name">–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π</span>
                </div>
                <div class="theme-selector__option" data-theme="elegant">
                    <span class="theme-selector__icon">üëë</span>
                    <span class="theme-selector__name">–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π</span>
                </div>
                <div class="theme-selector__option" data-theme="creative">
                    <span class="theme-selector__icon">üöÄ</span>
                    <span class="theme-selector__name">–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π</span>
                </div>
            </div>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–æ–≤
        const languageSelector = navigation.querySelector('.language-selector');
        if (languageSelector) {
            languageSelector.insertAdjacentElement('afterend', themeSelector);
        } else {
            navigation.insertBefore(themeSelector, navigation.firstChild);
        }

        this.themeSelector = themeSelector;
    }

    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        if (this.themeSelector) {
            const current = this.themeSelector.querySelector('.theme-selector__current');
            const dropdown = this.themeSelector.querySelector('.theme-selector__dropdown');
            const options = this.themeSelector.querySelectorAll('.theme-selector__option');

            // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ dropdown
            current.addEventListener('click', () => {
                dropdown.classList.toggle('theme-selector__dropdown--open');
            });

            // –í—ã–±–æ—Ä —Ç–µ–º—ã
            options.forEach(option => {
                option.addEventListener('click', () => {
                    const theme = option.getAttribute('data-theme');
                    this.setTheme(theme);
                    dropdown.classList.remove('theme-selector__dropdown--open');
                });
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
            document.addEventListener('click', (e) => {
                if (!this.themeSelector.contains(e.target)) {
                    dropdown.classList.remove('theme-selector__dropdown--open');
                }
            });
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
    setTheme(theme) {
        if (this.themes.includes(theme)) {
            this.currentTheme = theme;
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
            this.updateThemeSelector();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
            this.animateThemeChange();
            
            console.log(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${theme}`);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º
    updateThemeSelector() {
        if (this.themeSelector) {
            const name = this.themeSelector.querySelector('.theme-selector__name');
            if (name) {
                name.textContent = this.themeNames[this.currentTheme];
            }
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ç–µ–º—ã
    animateThemeChange() {
        const content = document.querySelector('.main');
        if (content) {
            content.style.opacity = '0.8';
            content.style.transform = 'scale(0.99)';
            
            setTimeout(() => {
                content.style.opacity = '1';
                content.style.transform = 'scale(1)';
            }, 300);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
    getCurrentTheme() {
        return this.currentTheme;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã
    getThemeName(theme) {
        return this.themeNames[theme] || theme;
    }

    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
    getAvailableThemes() {
        return this.themes;
    }
}
